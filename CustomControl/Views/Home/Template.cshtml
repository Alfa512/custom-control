@using System.Globalization
@using CustomControl.Models.ViewModel
@using Newtonsoft.Json
@model List<CustomControl.Models.TimeLine>

@{
    ViewBag.Title = "Template";
    var poolTableList = new List<PoolTablePartVm>();
}

<h2>@ViewBag.Title</h2>

@foreach (var timeline in Model)
{
    <div class="row">
        <div class="col table-left">
            <table class="table table-responsive table-left">
                <tbody class="">
                    <tr class="">
                        <th>Wasserzeit</th>
                    </tr>
                    <tr class="">
                        <th>von</th>
                        <th>bis</th>
                    </tr>

                    @foreach (var interval in timeline.TimeInterval.IntervalList)
                    {
                        <tr class="">
                            <td>@interval.From</td>
                            <td>@interval.Until</td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
        @if (timeline.SwimmingPools.Any())
        {
            var i = 0;

            foreach (var swimmingPool in timeline.SwimmingPools)
            {
                i++;
                <div class="col table-left">
                    <table class="table table-responsive table-left">
                        <tbody class="">
                            <tr class="row">
                                <th>Becken - @i</th>
                            </tr>
                            <tr class="row">
                                @for (var j = 1; j <= swimmingPool.SwimLines.Count; j++)
                                {
                                    <th class="col">@j</th>
                                }
                            </tr>
                            @{
                                Html.RenderAction("SwimmingPoolTablePart", new RouteValueDictionary { { "swimLinesCount", swimmingPool.SwimLines.Count }, { "timeIntervalsCount", timeline.TimeInterval.IntervalList.Count }, { "currentSwmPool", i } });
                            }
                            @for (var j = 0; j < swimmingPool.SwimLines.Count; j++)
                            {
                                for (var k = 0; k < timeline.TimeInterval.IntervalList.Count && k < swimmingPool.SwimLines[j].SwimLineItems.Count; k++)
                                {
                                    //setToPoolTable(@j, @k, @swimmingPool.SwimLines[j].SwimLineItems[k].Value)
                                    poolTableList.Add(new PoolTablePartVm
                                    {
                                        CurrentSwmPool = i,
                                        SwimLinesCount = j,
                                        TimeIntervalsCount = k,
                                        Value = swimmingPool.SwimLines[j].SwimLineItems[k].Value
                                    });

                                }
                            }

                        </tbody>
                    </table>
                </div>
                                    }
                                }
    </div>
                                }   
@section scripts
{
    <script>
        @{
            var sett = new JsonSerializerSettings();
            sett.Culture = CultureInfo.CurrentCulture;
            //sett.
            var json = JsonConvert.SerializeObject(poolTableList.ToArray(), sett);
        }
        //var arrayOfArrays = JSON.parse(Html.Raw(poolTableList).ToString());
        initToPoolTable("@json");
    </script>
}
